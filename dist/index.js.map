{
  "version": 3,
  "sources": ["../lib/dmeanvarpn.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dsumpw = require( '@stdlib/blas-ext-base-dsumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanvarpn( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~4.3333 ]\n*/\nfunction dmeanvarpn( N, correction, x, strideX, out, strideOut ) {\n\tvar mu;\n\tvar ix;\n\tvar io;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideOut < 0 ) {\n\t\tio = -strideOut;\n\t} else {\n\t\tio = 0;\n\t}\n\tif ( N <= 0 ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\tn = N - correction;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tout[ io ] = x[ ix ];\n\t\tif ( n <= 0.0 ) {\n\t\t\tout[ io+strideOut ] = NaN;\n\t\t} else {\n\t\t\tout[ io+strideOut ] = 0.0;\n\t\t}\n\t\treturn out;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, strideX ) / N;\n\tif ( isnan( mu ) ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\t// Compute the sum of squared differences from the mean...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\t// Compute an error term for the mean:\n\tc = M / N;\n\n\tout[ io ] = mu + c;\n\tif ( n <= 0.0 ) {\n\t\tout[ io+strideOut ] = NaN;\n\t} else {\n\t\tout[ io+strideOut ] = (M2/n) - (c*(M/n));\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeanvarpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar dsumpw = require( '@stdlib/blas-ext-base-dsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496\u201399. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanvarpn( N, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 6.25 ]\n*/\nfunction dmeanvarpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\tvar mu;\n\tvar ix;\n\tvar io;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar c;\n\tvar n;\n\tvar i;\n\n\tix = offsetX;\n\tio = offsetOut;\n\tif ( N <= 0 ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\tn = N - correction;\n\tif ( N === 1 || strideX === 0 ) {\n\t\tout[ io ] = x[ ix ];\n\t\tif ( n <= 0.0 ) {\n\t\t\tout[ io+strideOut ] = NaN;\n\t\t} else {\n\t\t\tout[ io+strideOut ] = 0.0;\n\t\t}\n\t\treturn out;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = dsumpw( N, x, strideX, offsetX ) / N;\n\tif ( isnan( mu ) ) {\n\t\tout[ io ] = NaN;\n\t\tout[ io+strideOut ] = NaN;\n\t\treturn out;\n\t}\n\t// Compute the sum of squared differences from the mean...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += strideX;\n\t}\n\t// Compute an error term for the mean:\n\tc = M / N;\n\n\tout[ io ] = mu + c;\n\tif ( n <= 0.0 ) {\n\t\tout[ io+strideOut ] = NaN;\n\t} else {\n\t\tout[ io+strideOut ] = (M2/n) - (c*(M/n));\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeanvarpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar dmeanvarpn = require( './dmeanvarpn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( dmeanvarpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = dmeanvarpn;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean and variance of a double-precision floating-point strided array using a two-pass algorithm.\n*\n* @module @stdlib/stats-base-dmeanvarpn\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dmeanvarpn = require( '@stdlib/stats-base-dmeanvarpn' );\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanvarpn( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~4.3333 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var dmeanvarpn = require( '@stdlib/stats-base-dmeanvarpn' );\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var N = floor( x.length / 2 );\n*\n* var v = dmeanvarpn.ndarray( N, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 6.25 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar dmeanvarpn;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tdmeanvarpn = main;\n} else {\n\tdmeanvarpn = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = dmeanvarpn;\n\n// exports: { \"ndarray\": \"dmeanvarpn.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_dmeanvarpn", "__commonJSMin", "exports", "module", "isnan", "dsumpw", "dmeanvarpn", "N", "correction", "x", "strideX", "out", "strideOut", "mu", "ix", "io", "M2", "M", "d", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnan", "dsumpw", "dmeanvarpn", "N", "correction", "x", "strideX", "offsetX", "out", "strideOut", "offsetOut", "mu", "ix", "io", "M2", "M", "d", "c", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "dmeanvarpn", "ndarray", "join", "tryRequire", "isError", "main", "dmeanvarpn", "tmp"]
}
